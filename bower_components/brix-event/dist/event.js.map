{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///event.js","webpack:///webpack/bootstrap bffedc16cf2c9b6b93b0","webpack:///./src/brix/event.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","e","Error","code","jQuery","_","EventManager","prefix","PREFIX","_delegateBxTypeEvents","element","owner","$body","document","body","$element","data","BX_EVENT_SEPARATION","Math","random","BX_EVENT_CACHE","types","_parseBxTypes","each","type","appetizer","event","target","closest","length","closestSeparation","currentTarget","extraParameters","slice","arguments","component","query","error","entrees","apply","concat","bxtype","selector","replace","DEBUG","console","log","fix","RE_TARGET_TYPE","exec","_delegateBxTargetType","on","BX_EVENT_NAMESPACE","namespace","handler","attr","parts","_parseMethodAndParams","method","originalNamespace","params","eval","separation","parents","i","eq","_undelegateBxTypeEvents","item","_undelegateBxTargetTypeEvents","off","_bxTargetTypeAppetizer","originalType","trigger","_bxTargetTypeEntrees","$targets","targets","is","push","parentsUntil","toArray","currentType","ma","$target","window","_parseBxEvents","RE_BX_TYPE","RegExp","events","nodeType","elements","all","getElementsByTagName","attributes","attribute","name","handleObj","value","extend","_bx_events","unique","map","sort","RE_FN_ARGS","error1","error2","split","location","search","indexOf","arg","len","parseInt","NAMESPACE","prototype","delegate","label","group","time","timeEnd","groupEnd","undelegate","undefined"],"mappings":"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","file":"event.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"brix/event\"] = factory();\n\telse\n\t\troot[\"brix/event\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"brix/event\"] = factory();\n\telse\n\t\troot[\"brix/event\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t        !(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"jquery\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), !(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"underscore\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())\n\t    ], __WEBPACK_AMD_DEFINE_RESULT__ = function(\n\t        jQuery, _\n\t    ) {\n\t\n\t        var DEBUG = ~location.search.indexOf('brix.event.debug') && {\n\t            fix: function(arg, len) {\n\t                var fix = parseInt(len, 10) - ('' + arg).length\n\t                for (var i = 0; i < fix; i++) arg += ' '\n\t                return arg\n\t            }\n\t        }\n\t\n\t        var PREFIX = 'bx-'\n\t        var BX_EVENT_NAMESPACE = '.' + (Math.random() + '').replace(/\\D/g, '')\n\t        var RE_FN_ARGS = /([^()]+)(?:\\((.*)\\))?/\n\t        var RE_TARGET_TYPE = /^(window|document|body)-(.+)/\n\t        var BX_EVENT_SEPARATION = 'bx-event-separation-'\n\t        var BX_EVENT_CACHE = 'bx-event-cache-'\n\t\n\t        // 事件管理器\n\t        function EventManager(prefix) {\n\t            // Allow instantiation without the 'new' keyword\n\t            if (!(this instanceof EventManager)) {\n\t                return new EventManager(prefix)\n\t            }\n\t            this.prefix = prefix || PREFIX\n\t        }\n\t        EventManager.NAMESPACE = BX_EVENT_NAMESPACE\n\t\n\t        // 在节点 `element` 上代理 `bx-type` 风格的事件监听函数，事件监听函数定义在宿主对象 `owner` 中。\n\t        EventManager.prototype.delegate = function(element, owner) {\n\t            element = element || document.body\n\t            owner = owner || window\n\t\n\t            var label = this.prefix + 'event'\n\t            if (DEBUG) {\n\t                console.group(label)\n\t                console.time(label)\n\t                console.log(element)\n\t            }\n\t\n\t            _undelegateBxTypeEvents(this.prefix, element)\n\t            _delegateBxTypeEvents(this.prefix, element, owner)\n\t\n\t            if (DEBUG) {\n\t                console.timeEnd(label)\n\t                console.groupEnd(label)\n\t            }\n\t\n\t            return this\n\t        }\n\t\n\t        // 从节点 `element` 上移除 `bx-type` 风格的事件监听函数。\n\t        EventManager.prototype.undelegate = function(element) {\n\t            element = element || document.body\n\t            _undelegateBxTypeEvents(this.prefix, element)\n\t\n\t            return this\n\t        }\n\t\n\t        // 工具方法\n\t        EventManager._delegateBxTypeEvents = _delegateBxTypeEvents\n\t        EventManager._undelegateBxTypeEvents = _undelegateBxTypeEvents\n\t        EventManager._parseBxTypes = _parseBxTypes\n\t        EventManager._parseBxEvents = _parseBxEvents\n\t        EventManager._parseMethodAndParams = _parseMethodAndParams\n\t\n\t        return EventManager\n\t\n\t        /*\n\t            在节点 `element` 上代理 `prefix-type` 风格的事件监听函数。\n\t\n\t            1. 跑马圈地：为 element 设置唯一标识 SEPARATION\n\t            2. 解析节点 element 内 bx-type 风格的事件类型\n\t            3. 遍历事件类型数组，逐个代理\n\t                3.1 如果代理过，则跳过\n\t                3.2 在 body 上代理事件\n\t                3.3 记录事件相关的属性 type、bxtype、namespace、selector、appetizer\n\t         */\n\t        function _delegateBxTypeEvents(prefix, element, owner) {\n\t            var $body = jQuery(document.body)\n\t            var $element = jQuery(element)\n\t            var data = $element.data()\n\t\n\t            if (!data) return\n\t\n\t            data[BX_EVENT_SEPARATION + prefix] = Math.random()\n\t            if (!data[BX_EVENT_CACHE + prefix]) data[BX_EVENT_CACHE + prefix] = {}\n\t\n\t            var types = _parseBxTypes(prefix, element)\n\t            _.each(types, function(type /*, index*/ ) {\n\t                var bxtype = prefix + type // bx-type\n\t                var selector = ('[' + bxtype + ']').replace(/\\./g, '\\\\.') // [bx-type]\n\t\n\t                // 已经代理过该类型的事件，无需再次代理\n\t                if (data[BX_EVENT_CACHE + prefix][bxtype]) return\n\t\n\t                if (DEBUG) {\n\t                    console.log(DEBUG.fix(type, 16), bxtype)\n\t                }\n\t\n\t                RE_TARGET_TYPE.exec('')\n\t                if (RE_TARGET_TYPE.exec(type)) {\n\t                    _delegateBxTargetType(prefix, type, element, owner)\n\t                    return\n\t                }\n\t\n\t                // 在 body 上代理\n\t                $body.on(type + BX_EVENT_NAMESPACE, selector, appetizer)\n\t\n\t                // 记录开胃菜 appetizer()，用于将来移除\n\t                data[BX_EVENT_CACHE + prefix][bxtype] = {\n\t                    type: type,\n\t                    bxtype: bxtype,\n\t                    namespace: BX_EVENT_NAMESPACE,\n\t                    selector: selector,\n\t                    appetizer: appetizer\n\t                }\n\t\n\t                // 开胃菜\n\t                function appetizer(event) {\n\t                    if (jQuery(event.target).closest('.disabled').length) return\n\t                    if (closestSeparation(prefix, event.currentTarget) !== data[BX_EVENT_SEPARATION + prefix]) return\n\t\n\t                    var extraParameters = [].slice.call(arguments, 1)\n\t                    if (!event.owner) event.owner = owner\n\t                    if (!event.component) event.component = function() {\n\t                        try {\n\t                            // 尝试获取节点关联的组件实例\n\t                            return __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"brix/loader\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())).query(event.currentTarget)[0]\n\t                        } catch (error) {}\n\t                    }()\n\t                    entrees.apply(this, [event, owner, prefix].concat(extraParameters))\n\t                }\n\t            })\n\t        }\n\t\n\t        // 主菜\n\t        // event.namespace          通过 brix-event 管理的事件的命名空间都是 BX_EVENT_NAMESPACE\n\t        // event.originalNamespace  用于存放事件的原始命名空间\n\t        function entrees(event, owner, prefix) {\n\t            var extraParameters = [].slice.call(arguments, 3)\n\t\n\t            var currentTarget = jQuery(event.currentTarget)\n\t            var handler = currentTarget.attr(prefix + event.type) ||\n\t                currentTarget.attr(prefix + event.type + '.' + event.namespace)\n\t            if (!handler) return\n\t\n\t            var parts = _parseMethodAndParams(handler)\n\t            if (parts && owner[parts.method]) {\n\t                // 尝试恢复 namespace\n\t                var namespace = event.namespace\n\t                var originalNamespace = event.originalNamespace\n\t                if (originalNamespace) event.namespace = originalNamespace\n\t\n\t                try {\n\t                    owner[parts.method].apply(\n\t                        owner, [event].concat(extraParameters).concat(parts.params)\n\t                    )\n\t                } finally {\n\t                    // 尝试恢复 namespace\n\t                    if (originalNamespace) event.namespace = namespace\n\t                }\n\t\n\t            } else {\n\t                /* jshint evil:true */\n\t                eval(handler)\n\t            }\n\t        }\n\t\n\t        function closestSeparation(prefix, element) {\n\t            var separation = jQuery(element).data(BX_EVENT_SEPARATION + prefix)\n\t            if (!separation) {\n\t                var parents = jQuery(element).parents()\n\t                for (var i = 0; i < parents.length; i++) {\n\t                    if (parents.eq(i).data(BX_EVENT_SEPARATION + prefix)) {\n\t                        separation = parents.eq(i).data(BX_EVENT_SEPARATION + prefix)\n\t                        break\n\t                    }\n\t                }\n\t            }\n\t            return separation\n\t        }\n\t\n\t        function _undelegateBxTypeEvents(prefix, element) {\n\t            var $body = jQuery(document.body)\n\t            var $element = jQuery(element)\n\t            var data = $element.data()\n\t\n\t            if (!data) return\n\t\n\t            /* jshint unused:false */\n\t            _.each(data[BX_EVENT_CACHE + prefix], function(item, bxtype) {\n\t                RE_TARGET_TYPE.exec('')\n\t                if (RE_TARGET_TYPE.exec(item.type)) {\n\t                    _undelegateBxTargetTypeEvents(prefix, item.type, element)\n\t                    return\n\t                }\n\t                $body.off(item.type + item.namespace, item.selector, item.appetizer)\n\t            })\n\t            data[BX_EVENT_CACHE + prefix] = {}\n\t        }\n\t\n\t        // 在指定的节点上绑定事件\n\t        function _delegateBxTargetType(prefix, type, element, owner) {\n\t            // $1 window|document|body, $2 type\n\t            RE_TARGET_TYPE.exec('')\n\t            var ma = RE_TARGET_TYPE.exec(type)\n\t            if (!ma) throw '不支持 ' + type\n\t\n\t            var bxtype = prefix + type\n\t\n\t            var $target =\n\t                ma[1] === 'window' && 　jQuery(window) ||\n\t                ma[1] === 'document' && 　jQuery(document) ||\n\t                ma[1] === 'body' && 　jQuery(document.body)\n\t\n\t            $target.on(ma[2] + BX_EVENT_NAMESPACE, _bxTargetTypeAppetizer)\n\t            $target.on(bxtype + BX_EVENT_NAMESPACE, _bxTargetTypeEntrees)\n\t\n\t            // 开胃菜\n\t            function _bxTargetTypeAppetizer(event) {\n\t                var originalType = event.type // click\n\t                event.type = bxtype // bx-window-click\n\t                jQuery(event.target).trigger(event, [].slice.call(arguments, 1))\n\t                event.type = originalType\n\t            }\n\t\n\t            // 主菜\n\t            function _bxTargetTypeEntrees(event) {\n\t                var selector = '[' + prefix + type + ']'\n\t                var $targets = function() {\n\t                    var targets = []\n\t                    if (jQuery(event.target).is(selector)) targets.push(event.target)\n\t                    var parents = jQuery(event.target).parentsUntil(element, selector)\n\t                    targets = targets.concat(parents.toArray())\n\t                    return jQuery(targets)\n\t                }()\n\t\n\t                // bx-target-type => type\n\t                var currentType = event.type // bx-target-type\n\t                var originalType = ma[2] // type\n\t                event.type = originalType\n\t\n\t                var extraParameters = [].slice.call(arguments, 2)\n\t\n\t                _.each($targets, function(item /*, index*/ ) {\n\t                    var handler = jQuery(item).attr(currentType)\n\t                    if (!handler) return\n\t\n\t                    var parts = _parseMethodAndParams(handler)\n\t                    if (parts && owner[parts.method]) {\n\t                        owner[parts.method].apply(\n\t                            owner, [event].concat(extraParameters).concat(parts.params)\n\t                        )\n\t                    } else {\n\t                        /* jshint evil:true */\n\t                        eval(handler)\n\t                    }\n\t                })\n\t\n\t                // type => bx-target-type\n\t                event.type = currentType\n\t            }\n\t        }\n\t\n\t        // TODO\n\t        function _undelegateBxTargetTypeEvents(prefix, type /*, element*/ ) {\n\t            RE_TARGET_TYPE.exec('')\n\t            var ma = RE_TARGET_TYPE.exec(type)\n\t            if (!ma) throw '不支持 ' + type\n\t\n\t            var bxtype = prefix + type\n\t\n\t            var $target =\n\t                ma[1] === 'window' && 　jQuery(window) ||\n\t                ma[1] === 'document' && 　jQuery(document) ||\n\t                ma[1] === 'body' && 　jQuery(document.body)\n\t\n\t            $target.off(ma[2] + BX_EVENT_NAMESPACE)\n\t            $target.off(bxtype + BX_EVENT_NAMESPACE)\n\t        }\n\t\n\t        /**\n\t         * 解析 bx-type 风格的事件配置\n\t         * @param  {element} 一个 DOM 元素\n\t         * @param  {boolean} 是否进行深度查找\n\t         * @return {array}\n\t         *      [\n\t         *        {\n\t         *          target:\n\t         *          type:\n\t         *          handler:\n\t         *          method:\n\t         *          params:\n\t         *        },\n\t         *      ]\n\t         */\n\t        function _parseBxEvents(prefix, element) {\n\t            var RE_BX_TYPE = new RegExp(prefix + '(?!name|options)(.+)')\n\t            var events = []\n\t\n\t            // 数组 or 伪数组\n\t            if (!element.nodeType && element.length) {\n\t                _.each(element, function(item /*, index*/ ) {\n\t                    events = events.concat(\n\t                        _parseBxEvents(prefix, item)\n\t                    )\n\t                })\n\t                return events\n\t            }\n\t\n\t            var elements = function() {\n\t                /*\n\t                    “Array.prototype.slice: 'this' is not a JavaScript object” error in IE8\n\t                    var elements = [element].concat(\n\t                        [].slice.call(element.getElementsByTagName('*'), 0)\n\t                    )\n\t                 */\n\t                var elements = [element]\n\t                var all = element.getElementsByTagName('*')\n\t                for (var i = 0; i < all.length; i++) {\n\t                    elements.push(all[i])\n\t                }\n\t                return elements\n\t            }()\n\t            _.each(elements, function(item /*, index*/ ) {\n\t                _.each(item.attributes, function(attribute) {\n\t                    RE_BX_TYPE.exec('') // reset lastIndex to 0\n\t                    var ma = RE_BX_TYPE.exec(attribute.name)\n\t                    if (!ma) return\n\t                    var handleObj = {\n\t                        target: item,\n\t                        type: ma[1],\n\t                        handler: attribute.value\n\t                    }\n\t                    _.extend(handleObj, _parseMethodAndParams(attribute.value))\n\t\n\t                    // 避免重复代理\n\t                    // if (item._bx_events && item._bx_events[handleObj.type]) return\n\t\n\t                    events.push(handleObj)\n\t\n\t                    if (!item._bx_events) item._bx_events = {}\n\t                    item._bx_events[handleObj.type] = true\n\t                })\n\t            })\n\t            return events\n\t        }\n\t\n\t        /**\n\t         * 解析 bx-type 风格的事件类型\n\t         * @param  {element} 一个 DOM 元素\n\t         * @param  {boolean} 是否进行深度查找\n\t         * @return {array}\n\t         *      [ 'click', 'change', ... ]\n\t         */\n\t        function _parseBxTypes(prefix, element) {\n\t            return _.unique(\n\t                _.map(\n\t                    // [ { target type handler fn params }, ... ]\n\t                    _parseBxEvents(prefix, element),\n\t                    function(item) {\n\t                        return item.type\n\t                    }\n\t                )\n\t            ).sort()\n\t        }\n\t\n\t        /**\n\t         * 解析函数名称和参数值\n\t         * @param  {string} 表达式。\n\t         * @return {object}\n\t         *      {\n\t         *          fn: '',\n\t         *          params: [ arg1, arg2, ... ]\n\t         *      }\n\t         */\n\t        function _parseMethodAndParams(handler) {\n\t            if (!handler) return\n\t\n\t            var parts = RE_FN_ARGS.exec(handler)\n\t            var method\n\t            var params\n\t\n\t            if (parts && parts[1]) {\n\t                try {\n\t                    return {\n\t                        method: parts[1],\n\t                        /* jshint evil: true */\n\t                        params: eval('[' + (parts[2] || '') + ']')\n\t                    }\n\t                } catch (error) {}\n\t            }\n\t\n\t            if (parts && parts[1]) {\n\t                method = parts[1]\n\t                params = parts[2] || ''\n\t                try {\n\t                    // 1. 尝试保持参数的类型 \n\t                    /* jshint evil: true */\n\t                    params = eval('(function(){ return Array.prototype.slice.call(arguments) })(' + params + ')')\n\t\n\t                } catch (error1) {\n\t                    // fuck ie8\n\t                    try {\n\t                        /* jshint evil: true */\n\t                        params = eval('(function(){ var result = []; for(var i = 0; i < arguments.length; i++ ) { result.push(arguments[i]) } return result })(' + params + ')')\n\t\n\t                    } catch (error2) {\n\t                        // 2. 如果失败，只能解析为字符串\n\t                        params = params.split(/,\\s*/)\n\t                    }\n\t                }\n\t                return {\n\t                    method: method,\n\t                    params: params\n\t                }\n\t            }\n\t        }\n\t    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** event.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap bffedc16cf2c9b6b93b0\n **/","define(\n    [\n        'jquery', 'underscore'\n    ],\n    function(\n        jQuery, _\n    ) {\n\n        var DEBUG = ~location.search.indexOf('brix.event.debug') && {\n            fix: function(arg, len) {\n                var fix = parseInt(len, 10) - ('' + arg).length\n                for (var i = 0; i < fix; i++) arg += ' '\n                return arg\n            }\n        }\n\n        var PREFIX = 'bx-'\n        var BX_EVENT_NAMESPACE = '.' + (Math.random() + '').replace(/\\D/g, '')\n        var RE_FN_ARGS = /([^()]+)(?:\\((.*)\\))?/\n        var RE_TARGET_TYPE = /^(window|document|body)-(.+)/\n        var BX_EVENT_SEPARATION = 'bx-event-separation-'\n        var BX_EVENT_CACHE = 'bx-event-cache-'\n\n        // 事件管理器\n        function EventManager(prefix) {\n            // Allow instantiation without the 'new' keyword\n            if (!(this instanceof EventManager)) {\n                return new EventManager(prefix)\n            }\n            this.prefix = prefix || PREFIX\n        }\n        EventManager.NAMESPACE = BX_EVENT_NAMESPACE\n\n        // 在节点 `element` 上代理 `bx-type` 风格的事件监听函数，事件监听函数定义在宿主对象 `owner` 中。\n        EventManager.prototype.delegate = function(element, owner) {\n            element = element || document.body\n            owner = owner || window\n\n            var label = this.prefix + 'event'\n            if (DEBUG) {\n                console.group(label)\n                console.time(label)\n                console.log(element)\n            }\n\n            _undelegateBxTypeEvents(this.prefix, element)\n            _delegateBxTypeEvents(this.prefix, element, owner)\n\n            if (DEBUG) {\n                console.timeEnd(label)\n                console.groupEnd(label)\n            }\n\n            return this\n        }\n\n        // 从节点 `element` 上移除 `bx-type` 风格的事件监听函数。\n        EventManager.prototype.undelegate = function(element) {\n            element = element || document.body\n            _undelegateBxTypeEvents(this.prefix, element)\n\n            return this\n        }\n\n        // 工具方法\n        EventManager._delegateBxTypeEvents = _delegateBxTypeEvents\n        EventManager._undelegateBxTypeEvents = _undelegateBxTypeEvents\n        EventManager._parseBxTypes = _parseBxTypes\n        EventManager._parseBxEvents = _parseBxEvents\n        EventManager._parseMethodAndParams = _parseMethodAndParams\n\n        return EventManager\n\n        /*\n            在节点 `element` 上代理 `prefix-type` 风格的事件监听函数。\n\n            1. 跑马圈地：为 element 设置唯一标识 SEPARATION\n            2. 解析节点 element 内 bx-type 风格的事件类型\n            3. 遍历事件类型数组，逐个代理\n                3.1 如果代理过，则跳过\n                3.2 在 body 上代理事件\n                3.3 记录事件相关的属性 type、bxtype、namespace、selector、appetizer\n         */\n        function _delegateBxTypeEvents(prefix, element, owner) {\n            var $body = jQuery(document.body)\n            var $element = jQuery(element)\n            var data = $element.data()\n\n            if (!data) return\n\n            data[BX_EVENT_SEPARATION + prefix] = Math.random()\n            if (!data[BX_EVENT_CACHE + prefix]) data[BX_EVENT_CACHE + prefix] = {}\n\n            var types = _parseBxTypes(prefix, element)\n            _.each(types, function(type /*, index*/ ) {\n                var bxtype = prefix + type // bx-type\n                var selector = ('[' + bxtype + ']').replace(/\\./g, '\\\\.') // [bx-type]\n\n                // 已经代理过该类型的事件，无需再次代理\n                if (data[BX_EVENT_CACHE + prefix][bxtype]) return\n\n                if (DEBUG) {\n                    console.log(DEBUG.fix(type, 16), bxtype)\n                }\n\n                RE_TARGET_TYPE.exec('')\n                if (RE_TARGET_TYPE.exec(type)) {\n                    _delegateBxTargetType(prefix, type, element, owner)\n                    return\n                }\n\n                // 在 body 上代理\n                $body.on(type + BX_EVENT_NAMESPACE, selector, appetizer)\n\n                // 记录开胃菜 appetizer()，用于将来移除\n                data[BX_EVENT_CACHE + prefix][bxtype] = {\n                    type: type,\n                    bxtype: bxtype,\n                    namespace: BX_EVENT_NAMESPACE,\n                    selector: selector,\n                    appetizer: appetizer\n                }\n\n                // 开胃菜\n                function appetizer(event) {\n                    if (jQuery(event.target).closest('.disabled').length) return\n                    if (closestSeparation(prefix, event.currentTarget) !== data[BX_EVENT_SEPARATION + prefix]) return\n\n                    var extraParameters = [].slice.call(arguments, 1)\n                    if (!event.owner) event.owner = owner\n                    if (!event.component) event.component = function() {\n                        try {\n                            // 尝试获取节点关联的组件实例\n                            return require('brix/loader').query(event.currentTarget)[0]\n                        } catch (error) {}\n                    }()\n                    entrees.apply(this, [event, owner, prefix].concat(extraParameters))\n                }\n            })\n        }\n\n        // 主菜\n        // event.namespace          通过 brix-event 管理的事件的命名空间都是 BX_EVENT_NAMESPACE\n        // event.originalNamespace  用于存放事件的原始命名空间\n        function entrees(event, owner, prefix) {\n            var extraParameters = [].slice.call(arguments, 3)\n\n            var currentTarget = jQuery(event.currentTarget)\n            var handler = currentTarget.attr(prefix + event.type) ||\n                currentTarget.attr(prefix + event.type + '.' + event.namespace)\n            if (!handler) return\n\n            var parts = _parseMethodAndParams(handler)\n            if (parts && owner[parts.method]) {\n                // 尝试恢复 namespace\n                var namespace = event.namespace\n                var originalNamespace = event.originalNamespace\n                if (originalNamespace) event.namespace = originalNamespace\n\n                try {\n                    owner[parts.method].apply(\n                        owner, [event].concat(extraParameters).concat(parts.params)\n                    )\n                } finally {\n                    // 尝试恢复 namespace\n                    if (originalNamespace) event.namespace = namespace\n                }\n\n            } else {\n                /* jshint evil:true */\n                eval(handler)\n            }\n        }\n\n        function closestSeparation(prefix, element) {\n            var separation = jQuery(element).data(BX_EVENT_SEPARATION + prefix)\n            if (!separation) {\n                var parents = jQuery(element).parents()\n                for (var i = 0; i < parents.length; i++) {\n                    if (parents.eq(i).data(BX_EVENT_SEPARATION + prefix)) {\n                        separation = parents.eq(i).data(BX_EVENT_SEPARATION + prefix)\n                        break\n                    }\n                }\n            }\n            return separation\n        }\n\n        function _undelegateBxTypeEvents(prefix, element) {\n            var $body = jQuery(document.body)\n            var $element = jQuery(element)\n            var data = $element.data()\n\n            if (!data) return\n\n            /* jshint unused:false */\n            _.each(data[BX_EVENT_CACHE + prefix], function(item, bxtype) {\n                RE_TARGET_TYPE.exec('')\n                if (RE_TARGET_TYPE.exec(item.type)) {\n                    _undelegateBxTargetTypeEvents(prefix, item.type, element)\n                    return\n                }\n                $body.off(item.type + item.namespace, item.selector, item.appetizer)\n            })\n            data[BX_EVENT_CACHE + prefix] = {}\n        }\n\n        // 在指定的节点上绑定事件\n        function _delegateBxTargetType(prefix, type, element, owner) {\n            // $1 window|document|body, $2 type\n            RE_TARGET_TYPE.exec('')\n            var ma = RE_TARGET_TYPE.exec(type)\n            if (!ma) throw '不支持 ' + type\n\n            var bxtype = prefix + type\n\n            var $target =\n                ma[1] === 'window' && 　jQuery(window) ||\n                ma[1] === 'document' && 　jQuery(document) ||\n                ma[1] === 'body' && 　jQuery(document.body)\n\n            $target.on(ma[2] + BX_EVENT_NAMESPACE, _bxTargetTypeAppetizer)\n            $target.on(bxtype + BX_EVENT_NAMESPACE, _bxTargetTypeEntrees)\n\n            // 开胃菜\n            function _bxTargetTypeAppetizer(event) {\n                var originalType = event.type // click\n                event.type = bxtype // bx-window-click\n                jQuery(event.target).trigger(event, [].slice.call(arguments, 1))\n                event.type = originalType\n            }\n\n            // 主菜\n            function _bxTargetTypeEntrees(event) {\n                var selector = '[' + prefix + type + ']'\n                var $targets = function() {\n                    var targets = []\n                    if (jQuery(event.target).is(selector)) targets.push(event.target)\n                    var parents = jQuery(event.target).parentsUntil(element, selector)\n                    targets = targets.concat(parents.toArray())\n                    return jQuery(targets)\n                }()\n\n                // bx-target-type => type\n                var currentType = event.type // bx-target-type\n                var originalType = ma[2] // type\n                event.type = originalType\n\n                var extraParameters = [].slice.call(arguments, 2)\n\n                _.each($targets, function(item /*, index*/ ) {\n                    var handler = jQuery(item).attr(currentType)\n                    if (!handler) return\n\n                    var parts = _parseMethodAndParams(handler)\n                    if (parts && owner[parts.method]) {\n                        owner[parts.method].apply(\n                            owner, [event].concat(extraParameters).concat(parts.params)\n                        )\n                    } else {\n                        /* jshint evil:true */\n                        eval(handler)\n                    }\n                })\n\n                // type => bx-target-type\n                event.type = currentType\n            }\n        }\n\n        // TODO\n        function _undelegateBxTargetTypeEvents(prefix, type /*, element*/ ) {\n            RE_TARGET_TYPE.exec('')\n            var ma = RE_TARGET_TYPE.exec(type)\n            if (!ma) throw '不支持 ' + type\n\n            var bxtype = prefix + type\n\n            var $target =\n                ma[1] === 'window' && 　jQuery(window) ||\n                ma[1] === 'document' && 　jQuery(document) ||\n                ma[1] === 'body' && 　jQuery(document.body)\n\n            $target.off(ma[2] + BX_EVENT_NAMESPACE)\n            $target.off(bxtype + BX_EVENT_NAMESPACE)\n        }\n\n        /**\n         * 解析 bx-type 风格的事件配置\n         * @param  {element} 一个 DOM 元素\n         * @param  {boolean} 是否进行深度查找\n         * @return {array}\n         *      [\n         *        {\n         *          target:\n         *          type:\n         *          handler:\n         *          method:\n         *          params:\n         *        },\n         *      ]\n         */\n        function _parseBxEvents(prefix, element) {\n            var RE_BX_TYPE = new RegExp(prefix + '(?!name|options)(.+)')\n            var events = []\n\n            // 数组 or 伪数组\n            if (!element.nodeType && element.length) {\n                _.each(element, function(item /*, index*/ ) {\n                    events = events.concat(\n                        _parseBxEvents(prefix, item)\n                    )\n                })\n                return events\n            }\n\n            var elements = function() {\n                /*\n                    “Array.prototype.slice: 'this' is not a JavaScript object” error in IE8\n                    var elements = [element].concat(\n                        [].slice.call(element.getElementsByTagName('*'), 0)\n                    )\n                 */\n                var elements = [element]\n                var all = element.getElementsByTagName('*')\n                for (var i = 0; i < all.length; i++) {\n                    elements.push(all[i])\n                }\n                return elements\n            }()\n            _.each(elements, function(item /*, index*/ ) {\n                _.each(item.attributes, function(attribute) {\n                    RE_BX_TYPE.exec('') // reset lastIndex to 0\n                    var ma = RE_BX_TYPE.exec(attribute.name)\n                    if (!ma) return\n                    var handleObj = {\n                        target: item,\n                        type: ma[1],\n                        handler: attribute.value\n                    }\n                    _.extend(handleObj, _parseMethodAndParams(attribute.value))\n\n                    // 避免重复代理\n                    // if (item._bx_events && item._bx_events[handleObj.type]) return\n\n                    events.push(handleObj)\n\n                    if (!item._bx_events) item._bx_events = {}\n                    item._bx_events[handleObj.type] = true\n                })\n            })\n            return events\n        }\n\n        /**\n         * 解析 bx-type 风格的事件类型\n         * @param  {element} 一个 DOM 元素\n         * @param  {boolean} 是否进行深度查找\n         * @return {array}\n         *      [ 'click', 'change', ... ]\n         */\n        function _parseBxTypes(prefix, element) {\n            return _.unique(\n                _.map(\n                    // [ { target type handler fn params }, ... ]\n                    _parseBxEvents(prefix, element),\n                    function(item) {\n                        return item.type\n                    }\n                )\n            ).sort()\n        }\n\n        /**\n         * 解析函数名称和参数值\n         * @param  {string} 表达式。\n         * @return {object}\n         *      {\n         *          fn: '',\n         *          params: [ arg1, arg2, ... ]\n         *      }\n         */\n        function _parseMethodAndParams(handler) {\n            if (!handler) return\n\n            var parts = RE_FN_ARGS.exec(handler)\n            var method\n            var params\n\n            if (parts && parts[1]) {\n                try {\n                    return {\n                        method: parts[1],\n                        /* jshint evil: true */\n                        params: eval('[' + (parts[2] || '') + ']')\n                    }\n                } catch (error) {}\n            }\n\n            if (parts && parts[1]) {\n                method = parts[1]\n                params = parts[2] || ''\n                try {\n                    // 1. 尝试保持参数的类型 \n                    /* jshint evil: true */\n                    params = eval('(function(){ return Array.prototype.slice.call(arguments) })(' + params + ')')\n\n                } catch (error1) {\n                    // fuck ie8\n                    try {\n                        /* jshint evil: true */\n                        params = eval('(function(){ var result = []; for(var i = 0; i < arguments.length; i++ ) { result.push(arguments[i]) } return result })(' + params + ')')\n\n                    } catch (error2) {\n                        // 2. 如果失败，只能解析为字符串\n                        params = params.split(/,\\s*/)\n                    }\n                }\n                return {\n                    method: method,\n                    params: params\n                }\n            }\n        }\n    }\n)\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/brix/event.js\n ** module id = 0\n ** module chunks = 0\n **/"],"sourceRoot":""}